set_by_lua $user_agent 'return require("user_agent")()';
set_by_lua_block $deployment {
  local user_agent = require('user_agent')
  return user_agent.platform() .. '+' .. user_agent.deployment()
}

# TODO: enable in the future when we support SSL
# ssl_certificate_by_lua_block { require('module').call() }
# ssl_session_fetch_by_lua_block { require('module').call() }
# ssl_session_store_by_lua_block { require('module').call() }

location = /___http_call {
  internal;

  set $url '';

  set $endpoint '';

  set $host_header '';
  set $connection_header 'close';
  set $options '';
  set $grant_type '';

  proxy_pass $endpoint;
  proxy_pass_request_headers off;
  proxy_pass_request_body on;
  proxy_http_version 1.1;

  proxy_set_header Host $host_header;
  proxy_set_header Connection $connection_header;
  proxy_set_header X-Real-IP  $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-3scale-User-Agent $deployment;
  proxy_set_header X-3scale-Version $version;
  proxy_set_header User-Agent $user_agent;
  proxy_set_header X-3scale-OAuth2-Grant-Type $grant_type;
  proxy_set_header 3scale-options $options;

  rewrite_by_lua_block {
    require('resty.http_ng.backend.ngx'):resolver()
  }
}

location = /threescale_authrep {
  internal;

  set_by_lua_block $log {
    local log = ngx.var.arg_log;
    if log then return '&' .. ngx.unescape_uri(log) end
  }
  set_by_lua_block $backend_endpoint { return ngx.ctx.backend_endpoint }
  set $path /transactions/authrep.xml?$backend_authentication_type=$backend_authentication_value&service_id=$service_id&$usage&$credentials$log;
  proxy_pass_request_headers off;
  proxy_http_version 1.1;
  proxy_pass $backend_endpoint$path;
  proxy_set_header  Host  "$backend_host";
  proxy_set_header  User-Agent "$user_agent";
  proxy_set_header  X-3scale-User-Agent "$deployment";
  proxy_set_header  X-3scale-Version "$version";
  proxy_set_header  Connection "";

  # Enable the option to receive the rejection reason in the
  # '3scale-rejection-reason' header of the response.
  proxy_set_header  3scale-options "rejection_reason_header=1";

  rewrite_by_lua_block {
    ngx.var.real_url = ngx.var.backend_endpoint .. ngx.var.path
  }
}

location @out_of_band_authrep_action {
  internal;

  proxy_pass_request_headers off;

  set_by_lua $original_request_time 'return ngx.var.request_time';
  set_by_lua $backend_endpoint 'return ngx.var.post_action_backend_endpoint';

  content_by_lua_block { require('module'):post_action() }

  log_by_lua_block {
    ngx.var.post_action_impact = ngx.var.request_time - ngx.var.original_request_time
    require('module'):log()
  }
}

set $backend_endpoint 'http://127.0.0.1:8081';


location / {
  set $cached_key null;
  set $credentials null;
  set $usage null;
  set $service_id null;
  set $proxy_pass null;
  set $secret_token null;
  set $resp_body null;
  set $resp_headers null;

  set $client_id null;
  set $redirect_url null;

  set $backend_host 'backend';
  set $post_action_backend_endpoint '';
  set $backend_authentication_type null;
  set $backend_authentication_value null;
  set $version null;
  set $real_url null;

  set $post_action_impact null;
  set $original_request_id null;

  proxy_ignore_client_abort on;

  rewrite_by_lua_block { require('module'):rewrite() }
  access_by_lua_block { require('module'):access() }
  body_filter_by_lua_block { require('module'):body_filter() }
  header_filter_by_lua_block { require('module'):header_filter() }

  content_by_lua_block { require('module'):content() }

  proxy_pass $proxy_pass;
  proxy_http_version 1.1;
  proxy_set_header X-Real-IP  $remote_addr;
  proxy_set_header Host $http_host;
  proxy_set_header X-3scale-proxy-secret-token $secret_token;
  proxy_set_header X-3scale-debug "";
  proxy_set_header Connection "";

  post_action @out_of_band_authrep_action;

  include ../apicast.d/location.d/*.conf;
}

location = /_threescale/oauth_store_token {
  internal;
  proxy_pass_request_headers off;
  proxy_set_header  X-Real-IP  $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header  Host  "$backend_host";
  proxy_set_header  User-Agent "$user_agent";
  proxy_set_header  X-3scale-User-Agent "$deployment";
  proxy_set_header  X-3scale-Version "$version";

  proxy_pass $backend_endpoint/services/$service_id/oauth_access_tokens.xml?$backend_authentication_type=$backend_authentication_value;
}

location = /_threescale/check_credentials {
  internal;

  proxy_pass_request_headers off;
  proxy_set_header  X-Real-IP  $remote_addr;
  proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header  Host  "$backend_host";
  proxy_set_header  User-Agent "$user_agent";
  proxy_set_header  X-3scale-User-Agent "$deployment";
  proxy_set_header  X-3scale-Version "$version";

  proxy_pass $backend_endpoint/transactions/oauth_authorize.xml?$backend_authentication_type=$backend_authentication_value&service_id=$service_id&$args;
}

location = /threescale_oauth_authrep {
  internal;

  set_by_lua_block $log {
    local log = ngx.var.arg_log;
    if log then return '&' .. ngx.unescape_uri(log) end
  }
  set $path /transactions/oauth_authrep.xml?$backend_authentication_type=$backend_authentication_value&service_id=$service_id&$usage&$credentials$log;
  proxy_pass_request_headers off;
  proxy_http_version 1.1;
  proxy_pass $backend_endpoint$path;
  proxy_set_header  Host  "$backend_host";
  proxy_set_header  User-Agent "$user_agent";
  proxy_set_header  X-3scale-User-Agent "$deployment";
  proxy_set_header  X-3scale-Version "$version";
  proxy_set_header  Connection "";
  proxy_set_header  X-3scale-OAuth2-Grant-Type "authorization_code";

  rewrite_by_lua_block {
    ngx.var.real_url = ngx.var.backend_endpoint .. ngx.var.path
  }
}

# This exposes a health check for kubernetes environments
# This is so the healtcheck on our Google HTTP load balancers works
location /_threescale/healthz {
  return 200;
  access_log off;
}
